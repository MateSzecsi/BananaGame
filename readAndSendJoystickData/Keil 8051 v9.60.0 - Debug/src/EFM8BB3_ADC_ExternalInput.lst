C51 COMPILER V9.60.0.0   EFM8BB3_ADC_EXTERNALINPUT                                         11/18/2021 18:25:18 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE EFM8BB3_ADC_EXTERNALINPUT
OBJECT MODULE PLACED IN .\src\EFM8BB3_ADC_ExternalInput.OBJ
COMPILER INVOKED BY: c:\SiliconLabs\SimplicityStudio\v4\developer\toolchains\keil_8051\9.60\BIN\C51.exe C:\Users\merge\S
                    -implicityStudio\v4_workspace\readAndSendJoystickData\src\EFM8BB3_ADC_ExternalInput.c OMF2 SMALL DEBUG OBJECTEXTEND ROM(L
                    -ARGE) WARNINGLEVEL(2) FLOATFUZZY(3) OPTIMIZE(8,SPEED) INTVECTOR(0X0000) INTPROMOTE INCDIR(C:\Users\merge\SimplicityStudi
                    -o\v4_workspace\readAndSendJoystickData\inc;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.1.7//kits/common/dr
                    -ivers/efm8_retargetserial;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.1.7//Device/shared/si8051Base;C:/Sil
                    -iconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.1.7//Device/EFM8BB3/inc) PRINT(.\src\EFM8BB3_ADC_ExternalInput.lst) 
                    -COND PAGEWIDTH(120) PAGELENGTH(65) OBJECT(.\src\EFM8BB3_ADC_ExternalInput.OBJ)

line level    source

   1          /*
   2           * Main source file for reading and sending the joystick program
   3           */
   4          
   5          // The program was started from EFM8BB3_ADC_ExternalInput example program,
   6          // which is licensed:
   7          //      Copyright 2014 Silicon Laboratories, Inc.
   8          //      http://developer.silabs.com/legal/version/v11/Silicon_Labs_Software_License_Agreement.txt
   9          
  10          
  11          // Program Description:
  12          //
  13          // The system is clocked by the internal 24.5 MHz oscillator divided by 1.
  14          // Timer 2 triggers a conversion on ADC0 on each overflow.  The completion of
  15          // this conversion in turn triggers an interrupt service routine (ISR).  The ISR
  16          // averages some measurements, then sends the data out.
  17          //
  18          // The analog multiplexer selects P1.7 as the positive ADC0 input. This pin is
  19          // configured as an analog input in the port initialization routine. The
  20          // negative ADC0 input is connected via mux to ground, which provides for a
  21          // single-ended ADC input.
  22          //
  23          // An analog joystick is connected to P1.7. Each joystick position corresponds
  24          // to a unique voltage.
  25          //
  26          // Timer2 is set to start a conversion every 100 us, which is far longer
  27          // than the minimum required.
  28          //
  29          // Resources:
  30          //   SYSCLK - 24.5 MHz HFOSC0 / 1
  31          //   ADC    - 12-bit, VREF = VDD (3.3V)
  32          //   Timer2 - ADC start of conversion source
  33          
  34          
  35          //-----------------------------------------------------------------------------
  36          // Includes
  37          //-----------------------------------------------------------------------------
  38          #include <SI_EFM8BB3_Register_Enums.h>
  39          #include "InitDevice.h"
  40          #include <stdint.h>
  41           
  42          //-----------------------------------------------------------------------------
  43          // Main Routine
  44          //-----------------------------------------------------------------------------
  45          void main (void)
  46          {
  47   1      
  48   1         //Do the setup routine (generated by Hardware Configurator)
  49   1         enter_DefaultMode_from_RESET();
  50   1      
C51 COMPILER V9.60.0.0   EFM8BB3_ADC_EXTERNALINPUT                                         11/18/2021 18:25:18 PAGE 2   

  51   1         // Enable global interrupts
  52   1         IE_EA = 1;
  53   1      
  54   1         // Wait for ITs to happen (and service them)
  55   1         while (1) {}
  56   1      }
  57          
  58          // Silab Stratup routine
  59          // (called from standard startup asm code, needed because of that)
  60          void Silabs_Startup(void) {}


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =      8    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
