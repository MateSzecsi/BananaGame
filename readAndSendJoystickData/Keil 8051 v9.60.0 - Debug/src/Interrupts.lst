C51 COMPILER V9.60.0.0   INTERRUPTS                                                        11/18/2021 18:25:19 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE INTERRUPTS
OBJECT MODULE PLACED IN .\src\Interrupts.OBJ
COMPILER INVOKED BY: c:\SiliconLabs\SimplicityStudio\v4\developer\toolchains\keil_8051\9.60\BIN\C51.exe C:\Users\merge\S
                    -implicityStudio\v4_workspace\readAndSendJoystickData\src\Interrupts.c OMF2 SMALL DEBUG OBJECTEXTEND ROM(LARGE) WARNINGLE
                    -VEL(2) FLOATFUZZY(3) OPTIMIZE(8,SPEED) INTVECTOR(0X0000) INTPROMOTE INCDIR(C:\Users\merge\SimplicityStudio\v4_workspace\
                    -readAndSendJoystickData\inc;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.1.7//kits/common/drivers/efm8_reta
                    -rgetserial;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.1.7//Device/shared/si8051Base;C:/SiliconLabs/Simpli
                    -cityStudio/v4/developer/sdks/8051/v4.1.7//Device/EFM8BB3/inc) PRINT(.\src\Interrupts.lst) COND PAGEWIDTH(120) PAGELENGTH
                    -(65) OBJECT(.\src\Interrupts.OBJ)

line level    source

   1          /*
   2           * Source file for IT handling in read and send joystick program
   3           */
   4          
   5          // This file was started from EFM8BB3_ADC_ExternalInput example program,
   6          // which is licensed:
   7          //      Copyright 2014 Silicon Laboratories, Inc.
   8          //      http://developer.silabs.com/legal/version/v11/Silicon_Labs_Software_License_Agreement.txt
   9          
  10          
  11          // USER INCLUDES                        
  12          #include <SI_EFM8BB3_Register_Enums.h>
  13          #include <stdint.h>
  14          #include "codeActuallyDoneByUs/joystickSendGPIO.h"
  15          
  16          // DEFINES
  17          #define MEASUREMENTS_NUMBER 128 //if a power of 2, the calculation is faster
  18          
  19          //-----------------------------------------------------------------------------
  20          // ADC0EOC_ISR
  21          //-----------------------------------------------------------------------------
  22          //
  23          // ADC0EOC ISR Content goes here. Remember to clear flag bits:
  24          // ADC0CN0::ADINT (Conversion Complete Interrupt Flag)
  25          //
  26          // This ISR averages some samples then prints the result to the terminal.  The
  27          // ISR is called after each ADC conversion which is triggered by Timer2.
  28          //
  29          //-----------------------------------------------------------------------------
  30          SI_INTERRUPT(ADC0EOC_ISR, ADC0EOC_IRQn)
  31          {
  32   1         static uint32_t accumulator = 0;     // Accumulator for averaging
  33   1         static uint16_t measurements = MEASUREMENTS_NUMBER; // Measurement counter
  34   1         uint32_t result = 0;
  35   1         uint32_t mV;                         // Measured voltage in mV
  36   1      
  37   1         ADC0CN0_ADINT = 0;              // Clear ADC0 conv. complete flag
  38   1      
  39   1         accumulator += ADC0;
  40   1         measurements--;
  41   1      
  42   1         if(measurements == 0)
  43   1         {
  44   2                measurements = MEASUREMENTS_NUMBER;
  45   2                result = accumulator / MEASUREMENTS_NUMBER;
  46   2                accumulator = 0;
  47   2      
  48   2                // The 12-bit ADC value is averaged across some measurements.
  49   2                // The measured voltage applied to P1.7 is then:
  50   2                //
C51 COMPILER V9.60.0.0   INTERRUPTS                                                        11/18/2021 18:25:19 PAGE 2   

  51   2                //                           Vref (mV)
  52   2                //   measurement (mV) =   --------------- * result (bits)
  53   2                //                       (2^12)-1 (bits)
  54   2      
  55   2                mV =  (result * 3300) / 4095;
  56   2      
  57   2                // Send the measured value (after conversion to joystick position
  58   2                sendJoystickPositionGPIO(mV);
  59   2         }
  60   1      }
  61          
  62          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    194    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      6       8
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
