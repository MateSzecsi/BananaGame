C51 COMPILER V9.60.0.0   JOYSTICKSENDGPIO                                                  11/18/2021 18:25:18 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE JOYSTICKSENDGPIO
OBJECT MODULE PLACED IN .\src\codeActuallyDoneByUs\joystickSendGPIO.OBJ
COMPILER INVOKED BY: c:\SiliconLabs\SimplicityStudio\v4\developer\toolchains\keil_8051\9.60\BIN\C51.exe C:\Users\merge\S
                    -implicityStudio\v4_workspace\readAndSendJoystickData\src\codeActuallyDoneByUs\joystickSendGPIO.c OMF2 SMALL DEBUG OBJECT
                    -EXTEND ROM(LARGE) WARNINGLEVEL(2) FLOATFUZZY(3) OPTIMIZE(8,SPEED) INTVECTOR(0X0000) INTPROMOTE INCDIR(C:\Users\merge\Sim
                    -plicityStudio\v4_workspace\readAndSendJoystickData\inc;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.1.7//ki
                    -ts/common/drivers/efm8_retargetserial;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.1.7//Device/shared/si805
                    -1Base;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.1.7//Device/EFM8BB3/inc) PRINT(.\src\codeActuallyDoneByU
                    -s\joystickSendGPIO.lst) COND PAGEWIDTH(120) PAGELENGTH(65) OBJECT(.\src\codeActuallyDoneByUs\joystickSendGPIO.OBJ)

line level    source

   1          /*
   2           * Source file for sending joystick position's data through GPIO
   3           */
   4          
   5          /// Includes
   6                  //#include "joystickSendGPIO.h" //own header (it can be omitted, there are no public defines yet)
   7                  #include <SI_EFM8BB3_Register_Enums.h>  //the mcu's register definitions
   8                  #include "../../joystickPosition.h"     //contains the enum for joystick's positions
   9                  #include "stdint.h"                                             //to use precise bit numbered integer types
  10          
  11          /// Defines
  12                  #define JOYSTICK_LEFT_VOLTAGE 1973      //input voltage (in mVs), when joystick moved left
  13                  #define JOYSTICK_RIGHT_VOLTAGE 2529     //input voltage (in mVs), when joystick moved right
  14                  #define TOLERANCE_VOLTAGE 50    //+- tolerance voltage (in mVs) of joystick positions
  15                  #define DATAOUT_GPIO_PIN P2_B0  //the used pin, on which data is transmitted (P2_B0 is UART1 TX on Expansi
             -on Header)
  16                  #define ACTIVITY_GPIO_PIN P2_B1 //the pin, on which active joystick signal is transmitted (P2_B1 is UART1
             - RX on Expansion Header)
  17          
  18          /// Utility function declarations
  19                  uint8_t isInSymmetricRange(uint32_t value, uint32_t center, uint32_t range);    //determines, if an integer 
             -value is
  20                                                                                                                                                                                  //in the given symmetric range
  21          /// Main functions
  22          
  23                  // Sends the joystick's position data through GPIO
  24                  // IN: measureVoltage: the measure voltage on the joystick in mVs
  25                  void sendJoystickPositionGPIO(uint32_t measuredVoltage) {
  26   1      
  27   1                      if(isInSymmetricRange(measuredVoltage, JOYSTICK_LEFT_VOLTAGE,   //if the joystick is in left position
  28   1                                      TOLERANCE_VOLTAGE)){
  29   2                              ACTIVITY_GPIO_PIN = ACTIVE;             //sign as an active joystick
  30   2                              DATAOUT_GPIO_PIN = LEFT;                //send, that moved left
  31   2                      }
  32   1                      else if(isInSymmetricRange(measuredVoltage, JOYSTICK_RIGHT_VOLTAGE,     //if the joystick is in right posit
             -ion
  33   1                                      TOLERANCE_VOLTAGE)){
  34   2                              ACTIVITY_GPIO_PIN = ACTIVE;             //sign as an active joystick
  35   2                              DATAOUT_GPIO_PIN = RIGHT;               //send, that moved right
  36   2                      }
  37   1                      else {          //if none movement is done, then the joystick isn't moved (in default position)
  38   2                              ACTIVITY_GPIO_PIN = INACTIVE;           //sing as an inactive joystick
  39   2                                                                                              //data is then indifferent
  40   2                      }
  41   1              }
  42          
  43          /// Utility function definitions
  44          
  45                  // Determines, if an integer value is in the given symmetric range
  46                  // IN:
C51 COMPILER V9.60.0.0   JOYSTICKSENDGPIO                                                  11/18/2021 18:25:18 PAGE 2   

  47                  //              center: the center point of the symmetric range
  48                  //              range: the expansion of the symmetric range
  49                  // OUT: a C type boolean, that is value in the given range
  50                  uint8_t isInSymmetricRange(uint32_t value, uint32_t center, uint32_t range) {
  51   1                      return (
  52   1                              value > center - range &&
  53   1                              value < center + range
  54   1                      );
  55   1              }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    158    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      16
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
